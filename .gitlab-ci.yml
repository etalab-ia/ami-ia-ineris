stages:
  - 🧰 Build
  - 📝 Test
  - 📦 Push
  - 🚢 Deploy Common
  - 🚢 Deploy Microservices
  - 💣 Destroy

###############################################################################
###################################  RULES  ###################################
###############################################################################

.all_stages:
  except:
    variables:
      - $TARGET_SERVICE != null && $TARGET_SERVICE != $SERVICE
      - $DEPLOY_ONLY != null

.deploy_only:
  except:
    variables:
      - $TARGET_SERVICE != null && $TARGET_SERVICE != $SERVICE
  only:
    variables:
      - $DEPLOY_ONLY != null

###############################################################################
################################  ENVIRONMENT  ################################
###############################################################################

.env:
  environment:
    name: ${CI_COMMIT_BRANCH}/${SERVICE}
  only:
    refs:
      - /env\/.+/

###############################################################################
###################################  PHASES  ##################################
###############################################################################

##############################  REGISTRY CONFIG  ##############################

.registry:config:
  image: $CI_REGISTRY/heka/tools/buildx:master
  services:
    - docker:19-dind
  before_script:
    - >
      echo $CI_REGISTRY_PASSWORD |
      docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker buildx create --driver docker-container --use
  tags:
    - ci-build

###################################  BUILD  ###################################

.build:
  stage: 🧰 Build
  extends:
    - .registry:config
  script:
    - >
      docker buildx build
      --build-arg CI_REGISTRY=$CI_REGISTRY
      --cache-from=type=registry,ref=$CI_REGISTRY_IMAGE/$SERVICE:$CI_COMMIT_REF_SLUG-cache
      --cache-to=type=registry,ref=$CI_REGISTRY_IMAGE/$SERVICE:$CI_COMMIT_REF_SLUG-cache,mode=max
      --tag $CI_REGISTRY_IMAGE/$SERVICE:$CI_COMMIT_SHA
      --push
      heka/$SERVICE

####################################  TEST  ###################################

.test:
  stage: 📝 Test
  image: $CI_REGISTRY_IMAGE/$SERVICE:$CI_COMMIT_SHA

####################################  PUSH  ###################################

.push:
  stage: 📦 Push
  extends:
    - .registry:config
  script:
    - >
      docker buildx build
      --build-arg CI_REGISTRY=$CI_REGISTRY
      --cache-from=type=registry,ref=$CI_REGISTRY_IMAGE/$SERVICE:$CI_COMMIT_REF_SLUG-cache
      --cache-to=type=registry,ref=$CI_REGISTRY_IMAGE/$SERVICE:$CI_COMMIT_REF_SLUG-cache,mode=max
      --tag $CI_REGISTRY_IMAGE/$SERVICE:$CI_COMMIT_REF_SLUG
      --push
      heka/$SERVICE

#################################  K8S CONFIG  ################################

.k8s:config:
  image: $CI_REGISTRY/heka/tools/k8s-deploy:master
  extends:
    - .env
  before_script:
    # Initialize useful variables for the k8s templates
    - export PROJECT_NAME=$(echo "$PROJECT_CONFIG" | yq -c -r ".project.name")
    - export PROJECT_PROTOCOL=$(echo "$PROJECT_CONFIG" | yq -rc ".network.protocol // .project.protocol")
    - export PROJECT_IS_HTTPS=$([[ "$PROJECT_PROTOCOl" == "https" ]] && echo "true" || echo "false")
    - export NOT_PROJECT_IS_HTTPS=$([[ "$PROJECT_IS_HTTPS" == "true" ]] && echo "false" || echo "false")
    - export PROJECT_INGRESS_HOSTNAME=$(echo "$PROJECT_CONFIG" | yq -rc ".network.hostname // .project.hostname")
    - export PREFIX_PATH_WITH_SLASH=$(echo "$PROJECT_CONFIG" | yq -rc ".network.\"prefix-path\" // \"/\(.project.name)\"")
    - export PREFIX_PATH=$([[ ${PREFIX_PATH_WITH_SLASH} == "/" ]] && echo "" || echo ${PREFIX_PATH_WITH_SLASH})
      # Create K8s connection environment variables
    - ENV=${CI_COMMIT_BRANCH#"env/"}
    - K8S_URL_VARIABLE_NAME=K8S_${ENV^^}_URL
    - K8S_URL="${!K8S_URL_VARIABLE_NAME}"
    - export K8S_NAMESPACE=heka-$CI_PROJECT_NAME
      # Connect to the cluster
    - kubectl config set-cluster $CI_PROJECT_ID --server="$K8S_URL" --certificate-authority="$K8S_CA_PEM"
    - kubectl config set-credentials $CI_PROJECT_ID --token=$K8S_TOKEN
    - kubectl config set-context $CI_PROJECT_ID --cluster=$CI_PROJECT_ID --user=$CI_PROJECT_ID
    - kubectl config use-context $CI_PROJECT_ID
      # Initialize environment variables
      # Base 64 is required for us to pass a yaml to a k8s secret
      # alpine needs to trail the newline in the end of the file
    - export PROJECT_CONFIG=$(echo "$PROJECT_CONFIG" | base64 | tr -d \\n)
    - export SHARED_PROJECT_CONFIG=$(echo "$SHARED_PROJECT_CONFIG" | base64 | tr -d \\n)
    - export PROVIDER_CREDENTIALS=$(echo "$PROVIDER_CREDENTIALS" | base64 | tr -d \\n)

###################################  DEPLOY  ##################################

.deploy:
  extends:
    - .k8s:config
  stage: 🚢 Deploy Microservices
  script:
    - >
      kubectl create secret docker-registry sia-docker-registry-credentials
      --docker-server=$CI_REGISTRY
      --docker-username=$REGISTRY_USER
      --docker-password=$REGISTRY_PASSWORD
      --docker-email=$GITLAB_USER_EMAIL
      --namespace "$K8S_NAMESPACE"
      --dry-run
      -o yaml | kubectl apply -f -
    - envsubst < ./heka/$SERVICE/k8s-template.yml | kubectl apply -f -

##################################  DESTROY  ##################################

.destroy:
  extends:
    - .k8s:config
  stage: 💣 Destroy
  when: manual
  script:
    - envsubst < ./heka/$SERVICE/k8s-template.yml | kubectl delete -f -

###############################################################################
##################################  INCLUDES  #################################
###############################################################################

include:
  - local: /heka/.gitlab-ci.yml
